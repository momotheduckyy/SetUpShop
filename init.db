Init db · PY
Download

import sqlite3
from pathlib import Path

# Database paths - following your project structure
DB_DIR = Path(__file__).parent / "db"
USERS_DB_PATH = DB_DIR / "users.db"
EQUIPMENT_DB_PATH = DB_DIR / "equipment.db"
SHOP_SPACES_DB_PATH = DB_DIR / "shop_spaces.db"


# ============================================
# USERS DATABASE SCHEMA
# ============================================
USERS_DDL = """
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL,
    shop_spaces TEXT DEFAULT '[]',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
"""


# ============================================
# EQUIPMENT DATABASE SCHEMA
# ============================================
EQUIPMENT_DDL = """
-- Equipment types catalog (templates/types of equipment available)
CREATE TABLE IF NOT EXISTS equipment_types (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    equipment_name TEXT NOT NULL,
    description TEXT NOT NULL,
    width INTEGER NOT NULL,
    height INTEGER NOT NULL,
    depth INTEGER NOT NULL,
    maintenance_interval_days INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User equipment instances (actual equipment that users own)
CREATE TABLE IF NOT EXISTS user_equipment (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    equipment_type_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    date_purchased DATE DEFAULT CURRENT_DATE,
    last_maintenance_date DATE,
    next_maintenance_date DATE,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (equipment_type_id) REFERENCES equipment_types(id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_user_equipment_user ON user_equipment(user_id);
CREATE INDEX IF NOT EXISTS idx_user_equipment_type ON user_equipment(equipment_type_id);
CREATE INDEX IF NOT EXISTS idx_user_equipment_next_maintenance ON user_equipment(next_maintenance_date);
CREATE INDEX IF NOT EXISTS idx_equipment_types_name ON equipment_types(equipment_name);
"""


# ============================================
# SHOP SPACES DATABASE SCHEMA
# ============================================
SHOP_SPACES_DDL = """
CREATE TABLE IF NOT EXISTS shop_spaces (
    shop_id TEXT PRIMARY KEY,
    username TEXT NOT NULL,
    shop_name TEXT NOT NULL,
    creation_timestamp TEXT NOT NULL,
    length REAL NOT NULL,
    width REAL NOT NULL,
    height REAL NOT NULL,
    equipment TEXT DEFAULT '[]'
);

CREATE INDEX IF NOT EXISTS idx_shop_spaces_username ON shop_spaces(username);
CREATE INDEX IF NOT EXISTS idx_shop_spaces_shop_name ON shop_spaces(shop_name);
"""


def init_users_db(db_path: Path = USERS_DB_PATH):
    """Initialize the users database"""
    db_path.parent.mkdir(parents=True, exist_ok=True)
    
    with sqlite3.connect(db_path) as conn:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.executescript(USERS_DDL)
    
    print(f"✓ Initialized users database: {db_path}")


def init_equipment_db(db_path: Path = EQUIPMENT_DB_PATH):
    """Initialize the equipment database"""
    db_path.parent.mkdir(parents=True, exist_ok=True)
    
    with sqlite3.connect(db_path) as conn:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.executescript(EQUIPMENT_DDL)
    
    print(f"✓ Initialized equipment database: {db_path}")


def init_shop_spaces_db(db_path: Path = SHOP_SPACES_DB_PATH):
    """Initialize the shop spaces database"""
    db_path.parent.mkdir(parents=True, exist_ok=True)
    
    with sqlite3.connect(db_path) as conn:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.executescript(SHOP_SPACES_DDL)
    
    print(f"✓ Initialized shop spaces database: {db_path}")


def init_all_databases():
    """Initialize all databasesm"""
    # Ensure db directory exists
    DB_DIR.mkdir(parents=True, exist_ok=True)
    
    # Initialize each database
    init_users_db()
    init_equipment_db()
    init_shop_spaces_db()
    
    print("Databases initialized")
    print("Python seed file run next with sample data")


if __name__ == "__main__":
    init_all_databases()
